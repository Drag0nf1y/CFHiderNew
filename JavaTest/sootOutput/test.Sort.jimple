public class test.Sort extends java.lang.Object
{

    public static void main(java.lang.String[])
    {
        java.lang.String[] args;
        int[] numbers, temp$0, temp$3, temp$6, temp$9, temp$12, temp$15, temp$18, temp$21, temp$24, temp$27;
        int temp$1, temp$2, temp$4, temp$5, temp$7, temp$8, temp$10, temp$11, temp$13, temp$14, temp$16, temp$17, temp$19, temp$20, temp$22, temp$23, temp$25, temp$26, temp$28, temp$29;
        java.io.PrintStream temp$30, temp$31;

        args := @parameter0: java.lang.String[];
        numbers = newarray (int)[10];
        temp$0 = numbers;
        temp$1 = 0;
        temp$2 = 10;
        temp$0[temp$1] = temp$2;
        temp$3 = numbers;
        temp$4 = 1;
        temp$5 = 20;
        temp$3[temp$4] = temp$5;
        temp$6 = numbers;
        temp$7 = 2;
        temp$8 = 15;
        temp$6[temp$7] = temp$8;
        temp$9 = numbers;
        temp$10 = 3;
        temp$11 = 0;
        temp$9[temp$10] = temp$11;
        temp$12 = numbers;
        temp$13 = 4;
        temp$14 = 6;
        temp$12[temp$13] = temp$14;
        temp$15 = numbers;
        temp$16 = 5;
        temp$17 = 7;
        temp$15[temp$16] = temp$17;
        temp$18 = numbers;
        temp$19 = 6;
        temp$20 = 2;
        temp$18[temp$19] = temp$20;
        temp$21 = numbers;
        temp$22 = 7;
        temp$23 = 1;
        temp$21[temp$22] = temp$23;
        temp$24 = numbers;
        temp$25 = 8;
        temp$26 = -5;
        temp$24[temp$25] = temp$26;
        temp$27 = numbers;
        temp$28 = 9;
        temp$29 = 55;
        temp$27[temp$28] = temp$29;
        temp$30 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke temp$30.<java.io.PrintStream: void print(java.lang.String)>("\u6392\u5e8f\u524d\uff1a");
        staticinvoke <test.Sort: void printArr(int[])>(numbers);
        staticinvoke <test.Sort: void bubbleSort(int[])>(numbers);
        temp$31 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke temp$31.<java.io.PrintStream: void print(java.lang.String)>("\u5192\u6ce1\u6392\u5e8f\u540e\uff1a");
        staticinvoke <test.Sort: void printArr(int[])>(numbers);
        return;
    }

    public static void bubbleSort(int[])
    {
        int[] numbers, temp$3, temp$5, temp$10, temp$13, temp$15, temp$19;
        int temp, size, i, temp$0, j, temp$1, temp$2, temp$4, temp$6, temp$7, temp$8, temp$9, temp$11, temp$12, temp$14, temp$16, temp$17, temp$18, temp$20, temp$21, temp$22, temp$23, temp$24, temp$25;

        numbers := @parameter0: int[];
        temp = 0;
        size = lengthof numbers;
        i = 0;

     label0:
        nop;
        temp$0 = size - 1;
        if i < temp$0 goto label1;

        goto label7;

     label1:
        nop;
        j = 0;

     label2:
        nop;
        temp$1 = size - 1;
        temp$2 = temp$1 - i;
        if j < temp$2 goto label3;

        goto label6;

     label3:
        nop;
        temp$3 = numbers;
        temp$4 = j;
        temp$5 = numbers;
        temp$6 = j;
        temp$7 = temp$6 + 1;
        temp$8 = temp$3[temp$4];
        temp$9 = temp$5[temp$7];
        if temp$8 > temp$9 goto label4;

        goto label5;

     label4:
        nop;
        temp$10 = numbers;
        temp$11 = j;
        temp$12 = temp$10[temp$11];
        temp = temp$12;
        temp$13 = numbers;
        temp$14 = j;
        temp$15 = numbers;
        temp$16 = j;
        temp$17 = temp$16 + 1;
        temp$18 = temp$15[temp$17];
        temp$13[temp$14] = temp$18;
        temp$19 = numbers;
        temp$20 = j;
        temp$21 = temp$20 + 1;
        temp$19[temp$21] = temp;

     label5:
        nop;
        nop;
        temp$22 = j;
        temp$23 = temp$22 + 1;
        j = temp$23;
        goto label2;

     label6:
        nop;
        nop;
        temp$24 = i;
        temp$25 = temp$24 + 1;
        i = temp$25;
        goto label0;

     label7:
        nop;
        return;
    }

    public static int getMiddle(int[], int, int)
    {
        int[] numbers, temp$0, temp$2, temp$7, temp$9, temp$12, temp$17, temp$19, temp$22;
        int low, high, temp, temp$1, temp$3, temp$4, temp$5, temp$6, temp$8, temp$10, temp$11, temp$13, temp$14, temp$15, temp$16, temp$18, temp$20, temp$21, temp$23;

        numbers := @parameter0: int[];
        low := @parameter1: int;
        high := @parameter2: int;
        temp$0 = numbers;
        temp$1 = low;
        temp = temp$0[temp$1];

     label0:
        nop;
        if low < high goto label1;

        goto label10;

     label1:
        nop;

     label2:
        nop;
        if low < high goto label3;

        goto label5;

     label3:
        nop;
        temp$2 = numbers;
        temp$3 = high;
        temp$4 = temp$2[temp$3];
        if temp$4 > temp goto label4;

        goto label5;

        goto label4;

     label4:
        nop;
        temp$5 = high;
        temp$6 = temp$5 + -1;
        high = temp$6;
        goto label2;

     label5:
        nop;
        temp$7 = numbers;
        temp$8 = low;
        temp$9 = numbers;
        temp$10 = high;
        temp$11 = temp$9[temp$10];
        temp$7[temp$8] = temp$11;

     label6:
        nop;
        if low < high goto label7;

        goto label9;

     label7:
        nop;
        temp$12 = numbers;
        temp$13 = low;
        temp$14 = temp$12[temp$13];
        if temp$14 < temp goto label8;

        goto label9;

        goto label8;

     label8:
        nop;
        temp$15 = low;
        temp$16 = temp$15 + 1;
        low = temp$16;
        goto label6;

     label9:
        nop;
        temp$17 = numbers;
        temp$18 = high;
        temp$19 = numbers;
        temp$20 = low;
        temp$21 = temp$19[temp$20];
        temp$17[temp$18] = temp$21;
        goto label0;

     label10:
        nop;
        temp$22 = numbers;
        temp$23 = low;
        temp$22[temp$23] = temp;
        return low;
    }

    public static void quickSort(int[], int, int)
    {
        int[] numbers;
        int low, high, middle, temp$0, temp$1, temp$2, temp$3;

        numbers := @parameter0: int[];
        low := @parameter1: int;
        high := @parameter2: int;
        if low < high goto label0;

        goto label1;

     label0:
        nop;
        temp$0 = staticinvoke <test.Sort: int getMiddle(int[],int,int)>(numbers, low, high);
        middle = temp$0;
        temp$1 = middle - 1;
        staticinvoke <test.Sort: void quickSort(int[],int,int)>(numbers, low, temp$1);
        temp$2 = middle;
        temp$3 = temp$2 + 1;
        staticinvoke <test.Sort: void quickSort(int[],int,int)>(numbers, temp$3, high);

     label1:
        nop;
        return;
    }

    public static void quick(int[])
    {
        int[] numbers;
        int temp$0, temp$1, temp$2;

        numbers := @parameter0: int[];
        temp$0 = lengthof numbers;
        if temp$0 > 0 goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = lengthof numbers;
        temp$2 = temp$1 - 1;
        staticinvoke <test.Sort: void quickSort(int[],int,int)>(numbers, 0, temp$2);

     label1:
        nop;
        return;
    }

    public static void printArr(int[])
    {
        int[] numbers, temp$3;
        int i, temp$0, temp$4, temp$5, temp$7, temp$8;
        java.io.PrintStream temp$1, temp$9;
        java.lang.StringBuffer temp$2;
        java.lang.String temp$6;

        numbers := @parameter0: int[];
        i = 0;

     label0:
        nop;
        temp$0 = lengthof numbers;
        if i < temp$0 goto label1;

        goto label2;

     label1:
        nop;
        temp$1 = <java.lang.System: java.io.PrintStream out>;
        temp$2 = new java.lang.StringBuffer;
        specialinvoke temp$2.<java.lang.StringBuffer: void <init>()>();
        temp$3 = numbers;
        temp$4 = i;
        temp$5 = temp$3[temp$4];
        virtualinvoke temp$2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(temp$5);
        virtualinvoke temp$2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(" ");
        temp$6 = virtualinvoke temp$2.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke temp$1.<java.io.PrintStream: void print(java.lang.String)>(temp$6);
        nop;
        temp$7 = i;
        temp$8 = temp$7 + 1;
        i = temp$8;
        goto label0;

     label2:
        nop;
        temp$9 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke temp$9.<java.io.PrintStream: void println(java.lang.String)>("");
        return;
    }

    public void <init>()
    {
        test.Sort this;

        this := @this: test.Sort;
        specialinvoke this.<java.lang.Object: void <init>()>();
        return;
    }
}
